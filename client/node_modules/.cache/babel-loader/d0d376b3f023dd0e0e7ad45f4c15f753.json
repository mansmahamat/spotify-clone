{"ast":null,"code":"var _jsxFileName = \"/Users/mansour/Desktop/Perso/spotify-clone/client/src/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport useAuth from './useAuth';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport TrackSearchResults from './TrackSearchResults';\nimport Player from './Player';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyApi = new SpotifyWebApi({\n  clientId: '39c957640b2940bc9b1ca9322bf20062'\n});\nexport default function Dashboard({\n  code\n}) {\n  _s();\n\n  const [search, setSearch] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [playingTrack, setPlayingTrack] = useState();\n  const accessToken = useAuth(code);\n\n  function chooseTrack(track) {\n    setPlayingTrack(track);\n    setSearch('');\n  }\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n    spotifyApi.getMe().then(function (data) {\n      console.log('Some information about the authenticated user', data.body);\n    }, function (err) {\n      console.log('Something went wrong!', err);\n    });\n  }, [accessToken]);\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n    spotifyApi.searchTracks(search).then(res => {\n      if (cancel) return;\n      setSearchResults(res.body.tracks.items.map(track => {\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image;\n          return smallest;\n        }, track.album.images[0]);\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url,\n          bigAlbumImage: track.album.images[0].url\n        };\n      }));\n    });\n    return () => cancel = true;\n  }, [search, accessToken]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      action: \"\",\n      method: \"get\",\n      className: \"form-example\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-example\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Enter your name: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"search\",\n          placeholder: \"search\",\n          value: search,\n          onChange: e => setSearch(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [searchResults.map(track => /*#__PURE__*/_jsxDEV(TrackSearchResults, {\n        track: track,\n        chooseTrack: chooseTrack\n      }, track.uri, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)), searchResults.length === 0 && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: searchResults.bigAlbumImage,\n        alt: \"yes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Player, {\n        accessToken: accessToken,\n        trackUri: playingTrack === null || playingTrack === void 0 ? void 0 : playingTrack.uri\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Dashboard, \"bgn32sMYMiRgYfxZy1zxxP3KNp8=\", false, function () {\n  return [useAuth];\n});\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/mansour/Desktop/Perso/spotify-clone/client/src/Dashboard.js"],"names":["React","useState","useEffect","useAuth","SpotifyWebApi","TrackSearchResults","Player","spotifyApi","clientId","Dashboard","code","search","setSearch","searchResults","setSearchResults","playingTrack","setPlayingTrack","accessToken","chooseTrack","track","setAccessToken","getMe","then","data","console","log","body","err","cancel","searchTracks","res","tracks","items","map","smallestAlbumImage","album","images","reduce","smallest","image","height","artist","artists","name","title","uri","albumUrl","url","bigAlbumImage","e","target","value","length"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport useAuth from './useAuth'\nimport SpotifyWebApi from 'spotify-web-api-node'\nimport TrackSearchResults from './TrackSearchResults';\nimport Player from './Player';\n\nconst spotifyApi = new SpotifyWebApi({\n    clientId: '39c957640b2940bc9b1ca9322bf20062'\n})\n\n\nexport default function Dashboard({code}) {\n\n    const [search, setSearch] = useState('')\n    const [searchResults, setSearchResults] = useState([])\n    const [playingTrack, setPlayingTrack] = useState()\n    const accessToken = useAuth(code)\n\n    function chooseTrack(track) {\n        setPlayingTrack(track)\n        setSearch('')\n    }\n\n    useEffect(() => {\n        if (!accessToken) return\n        spotifyApi.setAccessToken(accessToken);\n        spotifyApi.getMe()\n  .then(function(data) {\n    console.log('Some information about the authenticated user', data.body);\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n    }, [accessToken])\n\n    useEffect(() => {\n        if(!search) return setSearchResults([])\n        if(!accessToken) return\n\n        let cancel = false\n        spotifyApi.searchTracks(search).then((res) =>{\n            if (cancel) return\n            setSearchResults(res.body.tracks.items.map(track => {\n                const smallestAlbumImage = track.album.images.reduce(\n                    (smallest, image) => {\n                      if (image.height < smallest.height) return image\n                      return smallest\n                    },\n                    track.album.images[0])\n                return {\n                    artist: track.artists[0].name,\n                    title: track.name,\n                    uri: track.uri,\n                    albumUrl: smallestAlbumImage.url,\n                    bigAlbumImage: track.album.images[0].url\n                }\n            }))\n        })\n        return () => cancel = true\n    }, [search, accessToken])\n\n    return (\n        <div>\n            <form action=\"\" method=\"get\" className=\"form-example\">\n  <div className=\"form-example\">\n    <label>Enter your name: </label>\n    <input type=\"search\" placeholder=\"search\" value={search} onChange={e => setSearch(e.target.value)}/>\n  </div>\n</form>\n\n<div>\n    {searchResults.map(track => (\n        <TrackSearchResults track={track} chooseTrack={chooseTrack} key={track.uri} />\n    ))}\n    {searchResults.length === 0 && (\n       <img src={searchResults.bigAlbumImage} alt=\"yes\" />\n    )}\n</div>\n<div>\n       <Player  accessToken={accessToken} trackUri={playingTrack?.uri} />\n</div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}