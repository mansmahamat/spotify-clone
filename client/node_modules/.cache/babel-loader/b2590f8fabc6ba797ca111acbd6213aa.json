{"ast":null,"code":"var _jsxFileName = \"/Users/mansour/Desktop/Perso/spotify-clone/client/src/Player.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Player({\n  accessToken,\n  trackUri\n}) {\n  _s();\n\n  const [play, setPlay] = useState(false);\n  useEffect(() => setPlay(true), [trackUri]);\n  if (!accessToken) return null;\n  return /*#__PURE__*/_jsxDEV(SpotifyPlayer, {\n    token: accessToken,\n    showSaveIcon: true,\n    initialVolume: 0.5,\n    play: play,\n    callback: state => {\n      if (!state.isPlaying) setPlay(false);\n    },\n    uris: trackUri ? [trackUri] : []\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Player, \"jVhLcXDeOrLi5A95zDr62ndrz9E=\");\n\n_c = Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["/Users/mansour/Desktop/Perso/spotify-clone/client/src/Player.js"],"names":["React","useState","useEffect","SpotifyPlayer","Player","accessToken","trackUri","play","setPlay","state","isPlaying"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,aAAP,MAA0B,4BAA1B;;AAEA,eAAe,SAASC,MAAT,CAAgB;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAhB,EAA2C;AAAA;;AAEtD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,KAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAMM,OAAO,CAAC,IAAD,CAAd,EAAsB,CAACF,QAAD,CAAtB,CAAT;AAEF,MAAI,CAACD,WAAL,EAAkB,OAAO,IAAP;AAClB,sBACE,QAAC,aAAD;AACE,IAAA,KAAK,EAAEA,WADT;AAEE,IAAA,YAAY,MAFd;AAGE,IAAA,aAAa,EAAE,GAHjB;AAIE,IAAA,IAAI,EAAEE,IAJR;AAKE,IAAA,QAAQ,EAAEE,KAAK,IAAI;AACf,UAAG,CAACA,KAAK,CAACC,SAAV,EAAqBF,OAAO,CAAC,KAAD,CAAP;AACxB,KAPH;AAQE,IAAA,IAAI,EAAEF,QAAQ,GAAG,CAACA,QAAD,CAAH,GAAgB;AARhC;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GAnBuBF,M;;KAAAA,M","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\n\nexport default function Player({ accessToken, trackUri }) {\n\n    const [play, setPlay] = useState(false)\n\n    useEffect(() => setPlay(true), [trackUri])\n\n  if (!accessToken) return null;\n  return (\n    <SpotifyPlayer\n      token={accessToken}\n      showSaveIcon\n      initialVolume={0.5}\n      play={play}\n      callback={state => {\n          if(!state.isPlaying) setPlay(false);\n      }}\n      uris={trackUri ? [trackUri] : []}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}